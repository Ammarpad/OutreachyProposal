#!/usr/bin/env python3
"""
Module to look for QIDs of pages.

This module has two functions:
    find_qids_for_pages():
        This uses the page titles that are yet to be connected to the repo
        (as generated by the Special:UnconnectedPages page) and attempt to
        find their QIDs through entity search at the repo.
    search_terms_for_qids():
        This uses the identified titles in on the page (User:Ammarpad/Outreachy 1)
        and also attempt to find out their QIDs through entity search. The pages
        are in three languages English, French and Arabic
"""
import os
import sys
sys.path.append(os.environ['PYWIKIBOT_DIR'])

import pywikibot
import re

def main():
    try:
        # Run for French, Arabic and English pages
        search_terms_for_qids('fr')
        search_terms_for_qids('ar')
        search_terms_for_qids('en')
        # Run for UnconnectedPages
        find_qids_for_pages()
    except KeyboardInterrupt:
       pass

def find_qids_for_pages():
    """
    Loop through English Wikipedia unconnected pages and attempt to
    find their QIDs in the repo.
    """
    enwiki = pywikibot.Site('en', 'wikipedia')
    data_repo = enwiki.data_repository()
    unconnected_pages = enwiki.querypage('UnconnectedPages', total=1000)

    # Filter pages not in main namespace
    mainspace_pages = filter(lambda page: (page.namespace().id == 0), [*unconnected_pages])
    pages = [*mainspace_pages]

    print('Found %s total pages in main namespace' % len(pages))

    found = 0
    for p in pages:
        res = [*data_repo.search_entities(p.title(), 'en', None, **{'type': 'item'})]
        if len(res) > 0: print('Found %s matching results.' % len(res))

        if len(res) == 0:
            print('Couldn\'t find the QID for %s, Search API returns empty result.' % p.title())
            continue
        elif len(res) == 1:
            print('Found the page\'s QID: {title} -> {qid}.'.format(title=p.title(), qid=res[0]['id']))
            found += 1
            continue
        else:
            for r in res:
                if r['label'] == p.title():
                    print('Found the page\'s QID: {title} -> {qid}.'.format(title=p.title(), qid=r['id']))
                    found += 1
                    break

    print('Found %s total QIDs' % len(found))

def search_terms_for_qids(lang):
    """
    Load page titles identified in Task 1 (User:Ammarpad/Outreachy 1)
    and attempt to figure out their QIDs through entity search.

    @param lang: string language code of the wiki
    """
    wiki = pywikibot.Site(lang, 'wikipedia')
    wikidata = wiki.data_repository()

    # Pages from work in Task 1
    page = pywikibot.Page(wikidata, 'User:Ammarpad/Outreachy 1')

    # Find all page titles linking back to Wikipedia in 'lang'
    titles = re.findall(r'\[\[:%s:(.*?)\]\]' % lang, page.text)

    langs = {'fr': 'FRENCH', 'en': 'ENGLISH', 'ar': 'ARABIC'}

    print('RUNNING THE SCRIPT FOR %s WIKIPEDIA (%s pages)' %(langs[lang], len(titles)))

    found = 0
    for t in titles:
        # Work around bidirectionality problem for strings in parentheses
        if lang == 'ar':
            print('...%s Searching for' % t)
        else:
            print('Searching for %s...' % t)

        res = [*wikidata.search_entities(t, lang, None, **{'type': 'item'})]
        if len(res) > 0: print('Found %s matching results.' % len(res))

        if len(res) == 1:
            print('Found the page\'s QID: {title} -> {qid}.'.format(title=t, qid=res[0]['id']))
            found += 1
            continue
        elif len(res) == 0:
            print('Couldn\'t find the QID for %s, Search API returns empty result.' % t)
            continue

        for i in res:
            try:
                page = pywikibot.Page(wiki, i['match']['text'])
                if page.isRedirectPage():
                    page = page.getRedirectTarget()
                qid = page.data_item().title()

            except pywikibot.NoPage:
                print('Couldn\'t find the QID for %s, page doesn\'t exist' % t)
                continue

            if i['id'] == qid:
                print('Found the page\'s QID: {title} -> {qid}.'.format(title=t, qid=qid))
                found += 1
                break

    print('Finished! Found %s QIDs in total' % found)

if __name__ == '__main__':
    main()
